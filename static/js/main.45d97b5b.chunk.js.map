{"version":3,"sources":["machine.js","Cards/Ingredient.tsx","Cards/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["actionStates","initial","states","start","on","CAPTURE","BLACK_CAT","WITCH","SPELL","PASS","capture","type","SELECT","END","end","black_cat","SKIP","witch","WASH","spell","pass","turnStates","DRAW","ACTION","action","SPELLS","spells","self","SELF","TABLE","table","OPPONENTS","opponents","discard","DISCARD","done","gameMachine","Machine","id","TURN","turn","Ingredient","x","name","value","actions","theme","$actions","map","a","onClick","console","log","classes","join","cls","split","toLowerCase","className","cards","themes","Cards","$cards","c","i","App","useMachine","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45d97b5b.chunk.js","sourcesContent":["import { Machine } from 'xstate';\n\nconst spellsStates = {\n  initial: 'self',\n  states: {\n    self: {\n      on: {\n        SELF: 'self',\n        TABLE: 'table',\n      }\n    },\n    table: {\n      on: {\n        TABLE: 'table',\n        OPPONENTS: 'opponents',\n      }\n    },\n    opponents: {\n      on: {\n        OPPONENTS: 'opponents',\n        END: 'end',\n      }\n    },\n    end: {type: 'final'},\n  }\n}\n\nconst blackCatStates = {\n  initial: 'start',\n  states: {\n    start: {\n      on: {\n        SELECT: 'end',\n        SKIP: 'end',\n      }\n    },\n    end: { type: 'final'},\n  }\n}\n\nconst captureStates = {\n  initial: 'start',\n  states: {\n    start: {\n      on: {\n        SELECT: 'start',\n        END: 'end',\n      }\n    },\n    end: { type: 'final'},\n  }\n}\n\nconst witchStates = {\n  initial: 'start',\n  states: {\n    start: {\n      on: {\n        WITCH: 'end',\n        WASH: 'end',\n      }\n    },\n    end: { type: 'final'}\n  }\n}\n\nconst actionStates = {\n  initial: 'start',\n  states: {\n    start: {\n      on: {\n        CAPTURE: 'capture',\n        BLACK_CAT: 'black_cat',\n        WITCH: 'witch',\n        SPELL: 'spell',\n        PASS: 'pass',\n      },\n    },\n    capture: {\n      type: 'final',\n      ...captureStates,\n    },\n    black_cat: {\n      type: 'final',\n      ...blackCatStates,\n    },\n    witch: {\n      type: 'final',\n      ...witchStates,\n    },\n    spell: { type: 'final'},\n    pass: { type: 'final'},\n  }\n};\n\nconst turnStates = {\n  initial: 'start',\n  states: {\n    start: {\n      on: {\n        DRAW: 'start',\n        ACTION: 'action',\n      }\n    },\n    action: {\n      on: {\n        SPELLS: 'spells',\n      },\n      ...actionStates,\n    },\n    spells: {\n      ...spellsStates,\n      on: {\n        END: 'discard',\n      }\n    },\n    discard: {\n      on: {\n        DISCARD: 'done',\n        SKIP: 'done',\n      },\n    },\n    done: { type: 'final'},\n  }\n}\n\nexport const gameMachine = Machine({\n  id: 'game',\n  initial: 'start',\n  states: {\n    start: {\n      on: {\n        TURN: 'turn',\n      }\n    },\n    turn: {\n      ...turnStates,\n      on: {\n        END: 'end',\n      },\n    },\n    end: {\n      type: 'final'\n    }\n  }\n});","import React from 'react';\nimport './Card.scss';\nimport './themes.css';\n\ninterface IngredientProps {\n    name: string,\n    value: number,\n    actions: string[]\n    theme: string,\n}\n\n\nconst cls = (x: string[]) => x.join(' ');\nconst kabob = (x: string) => x.split(' ').map(x => x.toLowerCase()).join('-');\n\nexport const Ingredient = ({ name, value, actions, theme }: IngredientProps) => {\n    const $actions = actions.map(a => <button onClick={() => console.log(a)}>{a}</button>);\n    const classes = cls([\n        'card',\n        kabob(name),\n        theme,\n    ]);\n    return (\n        <article className={classes}>\n            <header>\n                <h2 className=\"name\">{name}</h2>\n                <h3 className=\"value\">{value}</h3>\n            </header>\n            <nav>\n                {$actions}\n            </nav>\n        </article>\n    )\n}","import React from \"react\";\nimport './Cards.scss';\nimport { Ingredient } from \"./Ingredient\";\n\ninterface CardProps {\n    name: string,\n    value: number,\n    actions: string[],\n    theme?: string,\n}\n\nconst actions = ['play', 'draw'];\n\nconst ShrinkingBrew = {\n    name: 'Shrinking Brew',\n    value: 1,\n    actions: actions,\n    theme: 'mud-kicks',\n};\n\nconst Bats = {\n    name: 'Bats',\n    value: 2,\n    actions: actions,\n};\n\nconst Toads = {\n    name: 'Toads',\n    value: 3,\n    actions: actions,\n};\n\nconst Newts = {\n    value: 4,\n    name: 'Newts',\n    actions: actions,\n}\n\nconst Mice = {\n    value: 5,\n    name: 'Mice',\n    actions: actions,\n}\n\nconst FrogJuice = {\n    value: 6,\n    name: 'Frog Juice',\n    actions: actions,\n    theme: 'forty-niners',\n}\n\nconst Toadstools = {\n    value: 7,\n    name: 'Toadstools',\n    actions: actions,\n    theme: 'eighty',\n}\n\nconst UnicornHorn = {\n    value: 8,\n    name: 'Unicorn Horn',\n    actions: actions,\n}\n\nconst MonkeyPowder = {\n    value: 9,\n    name: 'Monkey Powder',\n    actions: actions,\n}\n\nconst StarAndMoonDust = {\n    value: 10,\n    name: 'Star And Moon Dust',\n    actions: actions,\n}\n\nconst DeadlyNightshade = {\n    value: 11,\n    name: 'Deadly Nightshade',\n    actions: actions,\n}\n\nconst Prince = {\n    value: 12,\n    name: 'Prince',\n    actions: actions,\n}\n\nconst FairMaid = {\n    value: 12,\n    name: 'Fair Maid',\n    actions: actions,\n}\n\nconst cards = [\n    ShrinkingBrew,\n    Bats,\n    Toads,\n    Newts,\n    Mice,\n    FrogJuice,\n    Toadstools,\n    UnicornHorn,\n    MonkeyPowder,\n    StarAndMoonDust,\n    DeadlyNightshade,\n    FairMaid,\n    Prince\n]\n\nconst themes = [\n    'moonlight',\n    'hot-iron',\n    'swimming-pool',\n    'garden-dusk',\n    'orange-slate',\n    'cuban-blue',\n    'utah',\n    'bananas',\n    'melon-soup',\n    'creamsicle',\n    // not good\n    'rage',\n    'sunset',\n    'toy-block',\n    // bad\n    'gold-marble',\n    'red-slate',\n];\n\nexport function Cards() {\n    const $cards = cards.map((c: CardProps, i) => (\n        <Ingredient\n            name={c.name}\n            value={c.value}\n            actions={c.actions}\n            theme={c.theme || themes[i]}\n        />\n    ));\n    return (\n        <section className=\"cards\" >\n            { $cards}\n        </section>\n    );\n}","import React from 'react';\nimport { useMachine } from '@xstate/react';\nimport { gameMachine } from './machine';\nimport './reset.css';\nimport './App.scss';\nimport { Ingredient } from './Cards/Ingredient';\nimport { Cards } from './Cards';\n\ntype Send = (action: string) => void;\n\nconst CardStack = ({ onClick }: any) => {\n  return (\n    <figure onClick={onClick}>\n      Back\n    </figure>\n  );\n}\n\ntype TurnProps = {\n  state: string\n  send: Send\n};\nconst Turn = ({state, send}: TurnProps) => {\n  return (\n    <>\n      <h2>\n        Turn {state}\n      </h2>\n      <CardStack onClick={() => send('DRAW')} />\n\n      <button onClick={() => send('ACTION')}>\n        Action\n      </button>\n    </>\n  );\n}\n\n\ntype GameProps = {\n  state: any\n  send: Send\n};\nconst Game = ({state, send}: GameProps) => {\n  if (state.value) {\n    return (<Turn state={state.value} send={send}/>);\n  } else {\n    return (<button onClick={() => send('TURN')}>Turn</button>);\n  }\n}\n\nconst DebugGame = ({ state, send }: GameProps) => {\n  return (\n    <aside>\n      <pre>\n        {JSON.stringify(state, null, '  ')}\n      </pre>\n    </aside>\n  );\n}\n\n\nfunction App() {\n  const [state, send] = useMachine(gameMachine);\n\n  return (\n    <>\n      <main>\n        <h1 className=\"game-title\">Frog Juice</h1>\n        <Cards />\n      </main>\n    </>\n  );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}